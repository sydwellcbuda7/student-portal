apiVersion: v1
kind: Namespace
metadata:
  name: student-portal-app
---
# MySQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-db
  namespace: student-portal-app
spec:
  serviceName: mysql-db
  replicas: 1
  selector:
    matchLabels:
      app: mysql-db
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
      - name: mysql-db
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: rootpassword
        - name: MYSQL_DATABASE
          value: student_portal
        - name: MYSQL_USER
          value: student_user
        - name: MYSQL_PASSWORD
          value: student_pass
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        resources:
          limits:
            cpu: "1"
            memory: 5G
          requests:
            cpu: "0.5"
            memory: 1G
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
            - -u
            - root
            - -p$MYSQL_ROOT_PASSWORD
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
            - -u
            - root
            - -p$MYSQL_ROOT_PASSWORD
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
  volumeClaimTemplates:
  - metadata:
      name: mysql-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-db
  namespace: student-portal-app
spec:
  selector:
    app: mysql-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  clusterIP: None
---
# Backend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: student-portal
  namespace: student-portal-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: student-portal
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: student-portal
    spec:
      containers:
      - name: student-portal
        image: sydwellcbu/student_portal:0.0.1-SNAPSHOT
        env:
        - name: SPRING_DATASOURCE_URL
          value: jdbc:mysql://mysql-db.student-portal-app.svc.cluster.local:3306/student_portal
        - name: SPRING_DATASOURCE_USERNAME
          value: student_user
        - name: SPRING_DATASOURCE_PASSWORD
          value: student_pass
        - name: SPRING_MAIL_HOST
          value: maildev
        - name: SPRING_MAIL_PORT
          value: "1025"
        - name: SPRING_MAIL_USERNAME
          value: ""
        - name: SPRING_MAIL_PASSWORD
          value: ""
        - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH
          value: "false"
        - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE
          value: "false"
        - name: CLIENT_HOST
          value: "student-portal-ui"
        - name: CLIENT_PORT
          value: "4200"
        ports:
        - containerPort: 8083
        resources:
          limits:
            cpu: "1"
            memory: 1G
          requests:
            cpu: "500m"
            memory: 512M
        livenessProbe:
          httpGet:
            path: /api/v1/actuator/health
            port: 8083
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      initContainers:
      - name: wait-for-mysql
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z mysql-db.student-portal-app.svc.cluster.local 3306; do echo waiting for mysql; sleep 2; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: student-portal
  namespace: student-portal-app
spec:
  selector:
    app: student-portal
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
---
# Frontend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: student-portal-ui
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: student-portal-ui
  template:
    metadata:
      labels:
        app: student-portal-ui
    spec:
      containers:
      - name: student-portal-ui
        image: sydwellcbu/student_portal_ui:0.0.1-SNAPSHOT
        ports:
        - containerPort: 4200
        - containerPort: 9113
        resources:
          limits:
            cpu: "500m"
            memory: 512M
          requests:
            cpu: "250m"
            memory: 256M
        livenessProbe:
          httpGet:
            path: /
            port: 4200
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 4200
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      initContainers:
      - name: wait-for-backend
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z student-portal.student-portal-app.svc.cluster.local 8083; do echo waiting for backend; sleep 2; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: student-portal-ui
  namespace: student-portal-app
spec:
  selector:
    app: student-portal-ui
  ports:
    - protocol: TCP
      name: http
      port: 4200
      targetPort: 4200
    - protocol: TCP
      name: metrics
      port: 9113
      targetPort: 9113
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: student-portal-ui-ingress
  namespace: student-portal-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: student-portal-app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: student-portal-ui
            port:
              number: 4200
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: student-portal
            port:
              number: 8083
---
# MailDev
apiVersion: apps/v1
kind: Deployment
metadata:
  name: maildev
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: maildev
  template:
    metadata:
      labels:
        app: maildev
    spec:
      containers:
      - name: maildev
        image: maildev/maildev
        ports:
        - containerPort: 1080
        - containerPort: 1025
        resources:
          limits:
            cpu: "300m"
            memory: 256M
          requests:
            cpu: "100m"
            memory: 128M
        livenessProbe:
          exec:
            command:
            - nc
            - -z
            - localhost
            - "1025"
          initialDelaySeconds: 10
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: maildev
  namespace: student-portal-app
spec:
  selector:
    app: maildev
  ports:
    - protocol: TCP
      name: web
      port: 1080
      targetPort: 1080
    - protocol: TCP
      name: smtp
      port: 1025
      targetPort: 1025
---
# Monitoring Stack
# Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--web.console.templates=/etc/prometheus/consoles"
        - "--web.console.libraries=/etc/prometheus/console_libraries"
        - "--storage.tsdb.retention.time=30d"
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          limits:
            cpu: "1"
            memory: 2G
          requests:
            cpu: "500m"
            memory: 1G
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: student-portal-app
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter:9100']

      - job_name: 'mysql-exporter'
        static_configs:
          - targets: ['mysql-exporter:9104']

      - job_name: 'nginx-exporter'
        static_configs:
          - targets: ['nginx-exporter:9114']

      - job_name: 'cadvisor'
        static_configs:
          - targets: ['cadvisor:8080']

      - job_name: 'blackbox-exporter'
        static_configs:
          - targets: ['blackbox-exporter:9115']

      - job_name: 'backend'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['student-portal:8083']

      - job_name: 'frontend'
        static_configs:
          - targets: ['student-portal-ui:9113']
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: student-portal-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: student-portal-app
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
---
# Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: app-dashboards
          mountPath: /var/lib/grafana/dashboards
        resources:
          limits:
            cpu: "500m"
            memory: 1G
          requests:
            cpu: "200m"
            memory: 512M
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: app-dashboards
        configMap:
          name: app-dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: student-portal-app
data:
  datasource.yml: |-
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        isDefault: true
      - name: Loki
        type: loki
        url: http://loki:3100
        access: proxy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: student-portal-app
data:
  dashboard.yml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-dashboards
  namespace: student-portal-app
data:
  app_dashboard.json: |-
    {
      "title": "Student Portal Dashboard",
      "__inputs": [],
      "__requires": [],
      "panels": [],
      "templating": {
        "list": []
      },
      "annotations": {
        "list": []
      },
      "schemaVersion": 16,
      "version": 0
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: student-portal-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: student-portal-app
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
# Node Exporter
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: student-portal-app
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      containers:
      - name: node-exporter
        image: prom/node-exporter:v1.8.2
        args:
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        - --path.rootfs=/rootfs
        - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|run|var/lib/docker)($|/)
        - --collector.cpu
        - --collector.meminfo
        - --collector.diskstats
        - --no-collector.zfs
        - --web.listen-address=:9100
        ports:
        - containerPort: 9100
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: rootfs
          mountPath: /rootfs
          readOnly: true
        resources:
          limits:
            cpu: "500m"
            memory: 512M
          requests:
            cpu: "100m"
            memory: 100M
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9100
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: rootfs
        hostPath:
          path: /
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: student-portal-app
spec:
  selector:
    app: node-exporter
  ports:
    - protocol: TCP
      port: 9100
      targetPort: 9100
---
# MySQL Exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-exporter
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-exporter
  template:
    metadata:
      labels:
        app: mysql-exporter
    spec:
      containers:
      - name: mysql-exporter
        image: prom/mysqld-exporter:latest
        args:
        - --config.my-cnf=/etc/mysql-exporter/config.cnf
        ports:
        - containerPort: 9104
        volumeMounts:
        - name: mysql-exporter-config
          mountPath: /etc/mysql-exporter
        resources:
          limits:
            cpu: "200m"
            memory: 128M
          requests:
            cpu: "100m"
            memory: 64M
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9104
          initialDelaySeconds: 30
          periodSeconds: 20
      volumes:
      - name: mysql-exporter-config
        configMap:
          name: mysql-exporter-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-exporter-config
  namespace: student-portal-app
data:
  config.cnf: |-
    [client]
    user=student_user
    password=student_pass
    host=mysql-db.student-portal-app.svc.cluster.local
    port=3306
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-exporter
  namespace: student-portal-app
spec:
  selector:
    app: mysql-exporter
  ports:
    - protocol: TCP
      port: 9104
      targetPort: 9104
---
# Nginx Exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-exporter
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-exporter
  template:
    metadata:
      labels:
        app: nginx-exporter
    spec:
      containers:
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:latest
        args:
        - --nginx.scrape-uri=http://student-portal-ui:9113/nginx_status
        - --web.listen-address=:9114
        ports:
        - containerPort: 9114
        resources:
          limits:
            cpu: "100m"
            memory: 64M
          requests:
            cpu: "50m"
            memory: 32M
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 9113
          initialDelaySeconds: 30
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-exporter
  namespace: student-portal-app
spec:
  selector:
    app: nginx-exporter
  ports:
    - protocol: TCP
      port: 9114
      targetPort: 9114
---
# Loki
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  namespace: student-portal-app
spec:
  serviceName: loki
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.9.4
        args:
        - -config.file=/etc/loki/loki-config.yml
        ports:
        - containerPort: 3100
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        - name: loki-data
          mountPath: /loki
        resources:
          limits:
            cpu: "1"
            memory: 1G
          requests:
            cpu: "500m"
            memory: 512M
        livenessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 45
          periodSeconds: 10
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
  volumeClaimTemplates:
  - metadata:
      name: loki-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: student-portal-app
data:
  loki-config.yml: |-
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
      chunk_idle_period: 1h
      max_chunk_age: 1h
      chunk_target_size: 1048576
      chunk_retain_period: 30s
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /loki/boltdb-shipper-active
        cache_location: /loki/boltdb-shipper-cache
        cache_ttl: 24h
        shared_store: filesystem
      filesystem:
        directory: /loki/chunks
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
    chunk_store_config:
      max_look_back_period: 0s
    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: student-portal-app
spec:
  selector:
    app: loki
  ports:
    - protocol: TCP
      port: 3100
      targetPort: 3100
---
# Promtail
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: student-portal-app
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      containers:
      - name: promtail
        image: grafana/promtail:2.9.4
        args:
        - -config.file=/etc/promtail/promtail-config.yml
        volumeMounts:
        - name: promtail-config
          mountPath: /etc/promtail
        - name: docker-containers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: logs
          mountPath: /var/log
          readOnly: true
        - name: docker-sock
          mountPath: /var/run/docker.sock
        resources:
          limits:
            cpu: "300m"
            memory: 256M
          requests:
            cpu: "100m"
            memory: 128M
      volumes:
      - name: promtail-config
        configMap:
          name: promtail-config
      - name: docker-containers
        hostPath:
          path: /var/lib/docker/containers
      - name: logs
        hostPath:
          path: /var/log
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: student-portal-app
data:
  promtail-config.yml: |-
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
    positions:
      filename: /tmp/positions.yaml
    clients:
      - url: http://loki:3100/loki/api/v1/push
    scrape_configs:
      - job_name: containers
        static_configs:
          - targets:
              - localhost
            labels:
              job: container-logs
              __path__: /var/lib/docker/containers/*/*.log
      - job_name: system
        static_configs:
          - targets:
              - localhost
            labels:
              job: system-logs
              __path__: /var/log/*log
---
# Alertmanager
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: quay.io/prometheus/alertmanager:latest
        args:
        - --config.file=/etc/alertmanager/alertmanager.yml
        ports:
        - containerPort: 9093
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
        resources:
          limits:
            cpu: "300m"
            memory: 256M
          requests:
            cpu: "100m"
            memory: 128M
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: student-portal-app
data:
  alertmanager.yml: |-
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 5m
      repeat_interval: 3h
      receiver: 'web.hook'
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://example.com/webhook'
    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'dev', 'instance']
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: student-portal-app
spec:
  selector:
    app: alertmanager
  ports:
    - protocol: TCP
      port: 9093
      targetPort: 9093
---
# VictoriaMetrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: victoriametrics
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: victoriametrics
  template:
    metadata:
      labels:
        app: victoriametrics
    spec:
      containers:
      - name: victoriametrics
        image: victoriametrics/victoria-metrics:v1.111.0
        args:
        - -retentionPeriod=30d
        ports:
        - containerPort: 8428
        resources:
          limits:
            cpu: "1"
            memory: 1G
          requests:
            cpu: "500m"
            memory: 512M
        livenessProbe:
          httpGet:
            path: /health
            port: 8428
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: victoriametrics-data
        persistentVolumeClaim:
          claimName: victoriametrics-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: victoriametrics-data
  namespace: student-portal-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: victoriametrics
  namespace: student-portal-app
spec:
  selector:
    app: victoriametrics
  ports:
    - protocol: TCP
      port: 8428
      targetPort: 8428
---
# cAdvisor
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cadvisor
  namespace: student-portal-app
spec:
  selector:
    matchLabels:
      app: cadvisor
  template:
    metadata:
      labels:
        app: cadvisor
    spec:
      containers:
      - name: cadvisor
        image: gcr.io/cadvisor/cadvisor
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: rootfs
          mountPath: /rootfs
          readOnly: true
        - name: var-run
          mountPath: /var/run
          readOnly: true
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: docker
          mountPath: /var/lib/docker
          readOnly: true
        resources:
          limits:
            cpu: "500m"
            memory: 512M
          requests:
            cpu: "200m"
            memory: 256M
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 20
      volumes:
      - name: rootfs
        hostPath:
          path: /
      - name: var-run
        hostPath:
          path: /var/run
      - name: sys
        hostPath:
          path: /sys
      - name: docker
        hostPath:
          path: /var/lib/docker
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: cadvisor
  namespace: student-portal-app
spec:
  selector:
    app: cadvisor
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
# Blackbox Exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blackbox-exporter
  namespace: student-portal-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blackbox-exporter
  template:
    metadata:
      labels:
        app: blackbox-exporter
    spec:
      containers:
      - name: blackbox-exporter
        image: prom/blackbox-exporter
        ports:
        - containerPort: 9115
        resources:
          limits:
            cpu: "500m"
            memory: 512M
          requests:
            cpu: "200m"
            memory: 256M
        livenessProbe:
          httpGet:
            path: /
            port: 9115
          initialDelaySeconds: 30
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: blackbox-exporter
  namespace: student-portal-app
spec:
  selector:
    app: blackbox-exporter
  ports:
    - protocol: TCP
      port: 9115
      targetPort: 9115
---
# Monitoring Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: student-portal-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: monitoring.example.com
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      - path: /alertmanager
        pathType: Prefix
        backend:
          service:
            name: alertmanager
            port:
              number: 9093
